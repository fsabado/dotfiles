#Rules
#Must be idompotent - can be run multiple times without causing an issue
#YAML is whitespace sensitive
#Must only use whitespace, NOT tabs
#You can bypass by changing tabs to whitespaces

#Default options for plugins can be specified so that options don't have to be repeated many times. This can be very useful to use with the link command, for example.
#
#Defaults apply to all commands that follow setting the defaults. Defaults can be set multiple times; each change replaces the defaults with a new set of options.
- defaults:
    link:
        create: true
        relink: true
        force: true

#Clean commands specify directories that should be checked for dead symbolic links. These dead links are removed automatically. Only dead links that point to the dotfiles directory are removed unless the force option is set to true.
#- clean: ['~', '~/.config']
#- clean:
#    ~/profile.d:
#        force: true

#Put Links here
#Format
#Link commands are specified as a dictionary mapping targets to source locations. Source locations are specified relative to the base directory (that is specified when running the installer). If linking directories, do not include a trailing slash.
#
#Link commands support an (optional) extended configuration. In this type of configuration, instead of specifying source locations directly, targets are mapped to extended configuration dictionaries.
#
#Available extended configuration parameters:
#
#Link Option	Explanation
#path	- The target for the symlink, the same as in the shortcut syntax (default:null, automatic (see below))
#create	- When true, create parent directories to the link as needed. (default:false)
#relink	- Removes the old target if it's a symlink (default:false)
#force	- Force removes the old target, file or folder, and forces a new link (default:false)
#relative	- Use a relative path when creating the symlink (default:false, absolute links)
#glob	- Treat a * character as a wildcard, and perform link operations on all of those matches (default:false)
#Example:
#~/<linkedPath>: <fileInsideDotfiles>
#- link:
#    ~/.config/terminator:
#      create: true
#      path: config/terminator
#    ~/.vim: vim
#    ~/.vimrc:
#      relink: true
#      path: vimrc
#    ~/.zshrc:
#      force: true
#      path: zshrc
#
#
#If the source location is omitted or set to null, Dotbot will use the basename of the destination, with a leading . stripped if present. This makes the following three config files equivalent:
#- link:
#    ~/bin/ack:
#    ~/.vim:
#    ~/.vimrc:
#      relink: true
#    ~/.zshrc:
#      force: true
#    ~/.config/:
#      glob: true
#      path: config/*
#      relink: true
#Guide:https://github.com/anishathalye/dotbot#link
- link:
    ~/.gitconfig: gitconfig
    ~/.gitignore_global: gitignore_global
    ~/profile.d/git.sh:
        path: config.sh

#Put shell comands here
#Guide:https://github.com/anishathalye/dotbot#shell
#Shell commands specify shell commands to be run. Shell commands are run in the base directory (that is specified when running the installer).
#- shell:
# Reload all settings on profiles
#  - mkdir -p ~/src
#  - [mkdir -p ~/downloads, Creating downloads directory]
#  -
#    command: read var && echo Your variable is $var
#    stdin: true
#    stdout: true
#    description: Reading and printing variable
#  -
#    command: read fail
#    stderr: true
#- shell:
#  - mkdir -p ~/.rtorrent/session ~/.rtorrent/watch ~/.rtorrent/downloads
#  - git update-submodules # after linking ~/.gitconfig
  #- ~/.dotfiles/gnome-terminal-colors-solarized/install.sh --scheme "dark_alternative" --profile "Default" && echo "Make 'Solarized' profile first"
#  - ~/.dotfiles/oh-my-zsh-install.sh
